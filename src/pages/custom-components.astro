---
import Layout from "@layouts/Layout.astro";
import { t } from "../i18n";
import BlockHeader from "@components/BlockHeader.astro";
import ComponentPreview from "@components/ComponentPreview";
import CodeBlock from "@components/CodeBlock";

import {
	ExhibitionDemo,
	ExhibitionStateDemo,
} from "@components/previews/Exhibition";

import {
	LeftIconEffectButton,
	RightIconEffectButton,
	GooeyRightButton,
	GooeyLeftButton,
	ShineButton,
	ShineHoverButton,
} from "@components/previews/Expansion";

import type { ComponentsData } from "../custom-components";

const componentsData: ComponentsData = await import(
	"../custom-components.json"
);

const { components } = componentsData;

const currentLocale = "zh";
---

<Layout 
title={t(currentLocale, 'nav.components')}
description={t(currentLocale, 'nav.components')}
>
    <BlockHeader>组件展示</BlockHeader>
      <!-- 搜索和筛选区域 -->
    <div class="mb-8 p-4 bg-accent/5 rounded-xl border border-accent/10">
        <div class="flex flex-col sm:flex-row gap-4 items-center justify-between">
        <div class="flex-1 max-w-md">
            <input 
            type="text" 
            placeholder="搜索组件..." 
            class="w-full px-4 py-2 bg-background border border-accent rounded-lg focus:border-accent focus:outline-none"
            id="search-input"
            />
        </div>
        <div class="flex gap-2">
            <select class="px-3 py-2 text-accent bg-background border border-accent rounded-lg focus:border-accent focus:outline-none">
                <option value="">所有分类</option>
                <option value="UI">UI 组件</option>
                <option value="Layout">布局组件</option>
                <option value="Form">表单组件</option>
            </select>
            <button class="px-4 py-2 bg-accent text-background rounded-lg hover:bg-accent/90 transition-colors">
                筛选
            </button>
        </div>
        </div>
    </div>
    <!-- 组件网格 -->
  <div class="grid grid-cols-1  gap-6">
    {components.map((component) => (
      <div class="component-card bg-background border border-accent/10 rounded-xl overflow-hidden hover:border-accent/30 transition-all duration-300 hover:shadow-lg">
        <!-- 组件预览区域 -->
        <div class="p-6 bg-accent/5 border-b border-accent/10">
          <div class="flex items-center justify-between mb-3">
            <h3 class="text-lg font-semibold text-accent">{component.title}</h3>
            <span class="px-2 py-1 text-xs bg-accent/20 text-accent rounded-full">
              {component.category}
            </span>
          </div>
          <p class="text-sm text-accent mb-4">{component.description}</p>
          
          <!-- 预览区域 -->
          <div class="preview-area bg-background border border-accent rounded-lg p-4 min-h-[120px] flex items-center justify-center">
            <ComponentPreview client:load>
              <div class="flex gap-2">
                {component.previewType === "exhibition" && (
                  <>
                    <ExhibitionDemo client:load />
                    <ExhibitionStateDemo client:load />
                  </>
                )}
                {component.previewType === "extension" && <div class="flex gap-2 w-full flex-wrap">
                  <LeftIconEffectButton client:load />
                  <RightIconEffectButton client:load />
                  <GooeyRightButton client:load />
                  <GooeyLeftButton client:load />
                  <ShineButton client:load />
                  <ShineHoverButton client:load />
                </div>}
                {/* 未来可以在这里添加更多组件的条件渲染 */}
                {/* {component.previewType === "other-component" && (
                  <>
                    <OtherComponentDemo client:load />
                    <OtherComponentStateDemo client:load />
                  </>
                )} */}
              </div>
            </ComponentPreview>
          </div>
        </div>

        <!-- 代码展示区域 -->
        <div class="p-4">
          <!-- 使用示例 -->
          <div class="mb-4">
            <div class="flex items-center justify-between mb-3">
              <span class="text-sm font-medium text-accent">使用示例</span>
              <button 
                class="copy-btn text-xs px-2 py-1 bg-accent/10 text-accent rounded hover:bg-accent/20 transition-colors"
                data-code={component.usageCode}
              >
                复制
              </button>
            </div>
            <div class="code-block text-xs bg-accent/5 border border-accent rounded-lg overflow-x-auto">
              <CodeBlock client:load code={component.usageCode} language="tsx" showLineNumbers={true} />
            </div>
          </div>

          <!-- 源码区域（可展开/收缩） -->
          <div class="source-code-section">
            <button 
              class="source-toggle-btn w-full flex items-center justify-between p-3 bg-accent/5 border border-accent/10 rounded-lg hover:bg-accent/10 transition-colors"
              data-component-id={component.id}
            >
              <span class="text-sm font-medium text-accent">查看源码</span>
              <svg class="toggle-icon w-4 h-4 text-accent transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </button>
            
            <div class="source-code-content hidden mt-3">
              <div class="flex items-center justify-between mb-3">
                <span class="text-sm font-medium text-accent">组件源码</span>
                <button 
                  class="copy-btn text-xs px-2 py-1 bg-accent/10 text-accent rounded hover:bg-accent/20 transition-colors"
                  data-code={component.sourceCode}
                >
                  复制
                </button>
              </div>
                <div class="code-block text-xs bg-accent/5 border border-accent rounded-lg overflow-x-auto max-h-96 overflow-y-auto">
                  <CodeBlock client:load code={component.sourceCode} language="tsx" showLineNumbers={true} />
                </div>
            </div>
          </div>
        </div>

        <!-- 标签区域 -->
        <div class="px-4 pb-4">
          <div class="flex flex-wrap gap-1">
            {component.tags.map((tag) => (
              <a title={`查看所有 ${tag} 组件`} href={`/tags/${encodeURIComponent(tag)}`} class="tag-link text-xs px-2 py-1 bg-accent/10 text-accent rounded-full hover:bg-accent/20 transition-colors">
                #{tag}
              </a>
            ))}
          </div>
        </div>
      </div>
    ))}
  </div>
</Layout>

<style>
    .component-card {
        transition: all 0.3s ease;
    }
    .component-card:hover {
        transform:translateY(-2px);
    }

    .preview-area {
        min-height: 120px;
    }

    .code-block {
        font-family: 'JetBrains Mono Variable', monospace;
    }

    .tag-link {
      text-decoration: none;
      display: inline-block;
    }

    .tag-link:hover {
        transform:translateY(-2px);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
</style>
<script>
  // 搜索功能
  const searchInput = document.getElementById('search-input');
  const componentCards = document.querySelectorAll('.component-card');
  
  searchInput?.addEventListener('input', (e) => {
    const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
    
    componentCards.forEach((card) => {
      const title = card.querySelector('h3')?.textContent?.toLowerCase() || '';
      const description = card.querySelector('p')?.textContent?.toLowerCase() || '';
      const tags = Array.from(card.querySelectorAll('span')).map(span => span.textContent?.toLowerCase()).join(' ');
      
      const isMatch = title.includes(searchTerm) || 
                     description.includes(searchTerm) || 
                     tags.includes(searchTerm);
      
      (card as HTMLElement).style.display = isMatch ? 'block' : 'none';
    });
  });

  // 复制代码功能
  document.querySelectorAll('.copy-btn').forEach(btn => {
    btn.addEventListener('click', async (e) => {
      const button = e.target as HTMLButtonElement;
      const code = button.dataset.code || '';
      
      try {
        await navigator.clipboard.writeText(code);
        button.textContent = '已复制!';
        setTimeout(() => {
          button.textContent = '复制';
        }, 2000);
      } catch (err) {
        console.error('复制失败:', err);
      }
    });
  });

  // 源码展开/收缩功能
  document.querySelectorAll('.source-toggle-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const button = e.target as HTMLButtonElement;
      // const componentId = button.dataset.componentId;
      const content = button.parentElement?.querySelector('.source-code-content');
      const icon = button.querySelector('.toggle-icon');
      
      if (content && icon) {
        const isHidden = content.classList.contains('hidden');
        
        if (isHidden) {
          content.classList.remove('hidden');
          (icon as HTMLElement).style.transform = 'rotate(180deg)';
          button.querySelector('span')!.textContent = '收起源码';
        } else {
          content.classList.add('hidden');
          (icon as HTMLElement).style.transform = 'rotate(0deg)';
          button.querySelector('span')!.textContent = '查看源码';
        }
      }
    });
  });
</script>