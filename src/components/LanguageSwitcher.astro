---
import { getCurrentLocale } from "../i18n";

const currentLocale = getCurrentLocale(Astro.url.pathname);
const locales = ["en", "es", "zh"] as const;

// 语言显示名称映射
const languageData = {
	en: { name: "English" },
	es: { name: "Español" },
	zh: { name: "简体中文" },
};
---

<div class="language-switcher relative z-50">
  <div class="language-dropdown relative">
    <div
      id="language-button"
      class="flex items-center gap-1 px-1 py-1 text-foreground text-sm cursor-pointer transition-all duration-200 hover:text-accent focus:outline-none focus:text-accent"
      aria-label="Select language"
      aria-expanded="false"
      role="button"
      tabindex="0"
    >
      <span>{languageData[currentLocale].name}</span>
      <svg class="w-4 h-4 transition-transform duration-200 opacity-70" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <polyline points="6,9 12,15 18,9"></polyline>
      </svg>
    </div>
    
    <div 
      id="language-menu" 
      class="absolute top-full left-0 right-0 mt-1 bg-background border-2 border-accent rounded-xl shadow-xl opacity-0 invisible -translate-y-2 transition-all duration-200 min-w-[140px] overflow-hidden"
    >
      {locales.map((locale) => (
        <button 
          class={`w-full px-3 py-3 text-left text-sm text-foreground transition-all duration-200 hover:bg-accent hover:text-background first:rounded-t-xl last:rounded-b-xl ${
            locale === currentLocale 
              ? 'bg-accent text-background font-semibold' 
              : ''
          }`}
          data-locale={locale}
          type="button"
        >
          {languageData[locale].name}
        </button>
      ))}
    </div>
  </div>
</div>

<script>
  const languageButton = document.getElementById('language-button')
  const languageMenu = document.getElementById('language-menu')
  const chevron = languageButton?.querySelector('svg')
  const languageOptions = document.querySelectorAll('[data-locale]')
  
  let isOpen = false
  
  // Toggle dropdown - 支持点击和键盘操作
  function toggleDropdown(e) {
    if (e.type === 'keydown' && e.key !== 'Enter' && e.key !== ' ') {
      return
    }
    
    e.preventDefault()
    e.stopPropagation()
    isOpen = !isOpen
    languageButton?.setAttribute('aria-expanded', isOpen.toString())
    
    if (isOpen) {
      languageMenu?.classList.remove('opacity-0', 'invisible', '-translate-y-2')
      chevron?.classList.add('rotate-180')
    } else {
      languageMenu?.classList.add('opacity-0', 'invisible', '-translate-y-2')
      chevron?.classList.remove('rotate-180')
    }
  }
  
  languageButton?.addEventListener('click', toggleDropdown)
  languageButton?.addEventListener('keydown', toggleDropdown)
  
  // Close dropdown when clicking outside
  document.addEventListener('click', () => {
    if (isOpen) {
      isOpen = false
      languageButton?.setAttribute('aria-expanded', 'false')
      languageMenu?.classList.add('opacity-0', 'invisible', '-translate-y-2')
      chevron?.classList.remove('rotate-180')
    }
  })
  
  // Handle language selection
  languageOptions.forEach(option => {
    option.addEventListener('click', (e) => {
      e.stopPropagation()
      const newLocale = option.getAttribute('data-locale')
      
      if (newLocale) {
        // Get current path and switch to new locale
        const currentPath = window.location.pathname
        const pathWithoutLocale = currentPath.replace(/^\/(zh|es|en)/, '') || '/'
        
        // Construct new URL - zh is now default, so no prefix needed
        const newUrl = newLocale === 'zh' ? pathWithoutLocale : `/${newLocale}${pathWithoutLocale}`
        
        window.location.href = newUrl
      }
    })
  })
</script>