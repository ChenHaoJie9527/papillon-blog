{
    "components": [
        {
            "id": "dialog-modal",
            "title": "Exhibition 对话框",
            "description": "对话框组件，在PC端与Mobile端都支持，基于shadcn/ui的Dialog组件封装",
            "category": "UI",
            "tags": [
                "hooks"
            ],
            "previewType": "exhibition",
            "usageCode": "<Exhibition>\n  <ExhibitionTrigger asChild>\n    <button className=\"btn\">打开弹窗</button>\n  </ExhibitionTrigger>\n  <ExhibitionContent>\n    <ExhibitionHeader>\n      <ExhibitionTitle>标题</ExhibitionTitle>\n      <ExhibitionDescription>描述</ExhibitionDescription>\n    </ExhibitionHeader>\n    <ExhibitionBody>内容</ExhibitionBody>\n    <ExhibitionFooter>\n      <ExhibitionClose asChild>\n        <button className=\"btn\">关闭</button>\n      </ExhibitionClose>\n    </ExhibitionFooter>\n  </ExhibitionContent>\n</Exhibition>",
            "sourceCode": "\"use client\";\n\nimport { useMemo, createContext, useContext, useState, Fragment } from \"react\";\nimport { cn } from \"@components/lib/utils\";\nimport { useMediaQuery } from \"@hooks/useMediaQuery\";\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@components/ui/dialog\";\nimport {\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from \"@components/ui/drawer\";\n\ninterface BaseProps {\n  children: React.ReactNode;\n}\n\ninterface RootExhibitionProps extends BaseProps {\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n}\n\ninterface ExhibitionProps extends BaseProps {\n  className?: React.HTMLAttributes<HTMLDivElement>[\"className\"];\n  asChild?: true;\n}\n\n// 定义 Context 类型\ninterface ExhibitionContextType {\n  isDesktop: boolean;\n  Comp: typeof Dialog | typeof Drawer;\n  Trigger: typeof DialogTrigger | typeof DrawerTrigger;\n  Close: typeof DialogClose | typeof DrawerClose;\n  Content: typeof DialogContent | typeof DrawerContent;\n  Header: typeof DialogHeader | typeof DrawerHeader;\n  Title: typeof DialogTitle | typeof DrawerTitle;\n  Footer: typeof DialogFooter | typeof DrawerFooter;\n  Description: typeof DialogDescription | typeof DrawerDescription;\n  drawerProps: Record<string, any>;\n}\n\n// 创建 Context\nconst ExhibitionContext = createContext<ExhibitionContextType | null>(null);\n\n// 自定义 Hook\nfunction useExhibitionContext() {\n  const context = useContext(ExhibitionContext);\n  if (!context) {\n    throw new Error(\"Exhibition components must be used within Exhibition\");\n  }\n  return context;\n}\n\n// 主组件\nexport function Exhibition({ children, ...props }: RootExhibitionProps) {\n  const isDesktop = useMediaQuery(\"desktop\", {\n    defaultValue: true, // 在SSR时默认为桌面端\n    initializeWithValue: false, // 避免SSR时的水合问题\n  });\n\n  const Comp = isDesktop ? Dialog : Drawer;\n  const Trigger = isDesktop ? DialogTrigger : DrawerTrigger;\n  const Close = isDesktop ? DialogClose : DrawerClose;\n  const Content = isDesktop ? DialogContent : DrawerContent;\n  const Header = isDesktop ? DialogHeader : DrawerHeader;\n  const Title = isDesktop ? DialogTitle : DrawerTitle;\n  const Footer = isDesktop ? DialogFooter : DrawerFooter;\n  const Description = isDesktop ? DialogDescription : DrawerDescription;\n\n  const contextValue = useMemo(\n    () => ({\n      isDesktop,\n      Comp,\n      Trigger,\n      Close,\n      Content,\n      Header,\n      Title,\n      Footer,\n      Description,\n      drawerProps: !isDesktop ? { autoFocus: true } : {},\n    }),\n    [\n      isDesktop,\n      Comp,\n      Trigger,\n      Close,\n      Content,\n      Header,\n      Title,\n      Footer,\n      Description,\n    ],\n  );\n\n  return (\n    <ExhibitionContext value={contextValue}>\n      <Comp {...props} {...contextValue.drawerProps}>\n        {children}\n      </Comp>\n    </ExhibitionContext>\n  );\n}\n\nexport function ExhibitionTrigger({\n  children,\n  className,\n  ...props\n}: ExhibitionProps) {\n  const { Trigger } = useExhibitionContext();\n  return (\n    <Trigger className={cn(className)} {...props}>\n      {children}\n    </Trigger>\n  );\n}\n\nexport function ExhibitionClose({\n  children,\n  className,\n  ...props\n}: ExhibitionProps) {\n  const { Close } = useExhibitionContext();\n  return (\n    <Close className={cn(className)} {...props}>\n      {children}\n    </Close>\n  );\n}\n\nexport function ExhibitionContent({\n  children,\n  className,\n  ...props\n}: ExhibitionProps) {\n  const { Content } = useExhibitionContext();\n  return (\n    <Content className={cn(className)} {...props}>\n      {children}\n    </Content>\n  );\n}\n\nexport function ExhibitionHeader({\n  children,\n  className,\n  ...props\n}: ExhibitionProps) {\n  const { Header } = useExhibitionContext();\n  return (\n    <Header className={cn(className)} {...props}>\n      {children}\n    </Header>\n  );\n}\n\nexport function ExhibitionTitle({\n  children,\n  className,\n  ...props\n}: ExhibitionProps) {\n  const { Title } = useExhibitionContext();\n  return (\n    <Title className={cn(className)} {...props}>\n      {children}\n    </Title>\n  );\n}\n\nexport function ExhibitionDescription({\n  children,\n  className,\n  ...props\n}: ExhibitionProps) {\n  const { Description } = useExhibitionContext();\n  return (\n    <Description className={cn(className)} {...props}>\n      {children}\n    </Description>\n  );\n}\n\nexport function ExhibitionBody({\n  children,\n  className,\n  ...props\n}: ExhibitionProps) {\n  return (\n    <div className={cn(\"px-4 md:px-0\", className)} {...props}>\n      {children}\n    </div>\n  );\n}\n\nexport function ExhibitionFooter({\n  children,\n  className,\n  ...props\n}: ExhibitionProps) {\n  const { Footer } = useExhibitionContext();\n  return (\n    <Footer className={cn(className)} {...props}>\n      {children}\n    </Footer>\n  );\n}\n\nexport function ExhibitionDemo() {\n  return (\n    <Exhibition>\n      <ExhibitionTrigger asChild>\n        <button\n          className=\"btn border-accent border rounded-md p-2\"\n          type=\"button\"\n        >\n          组件打开弹窗\n        </button>\n      </ExhibitionTrigger>\n      <ExhibitionContent>\n        <ExhibitionHeader>\n          <ExhibitionTitle>组件标题</ExhibitionTitle>\n          <ExhibitionDescription>组件描述</ExhibitionDescription>\n        </ExhibitionHeader>\n        <ExhibitionBody>\n          <p>\n            This component is built using shadcn/ui&apos;s dialog and drawer\n            component, which is built on top of Vaul.\n          </p>\n        </ExhibitionBody>\n        <ExhibitionFooter>\n          <ExhibitionClose asChild className=\" justify-around\">\n            <div className=\"flex gap-2 w-full\">\n              <button type=\"button\" className=\"btn btn-outline\">\n                取消\n              </button>\n              <button type=\"button\" className=\"btn btn-outline\">\n                确认\n              </button>\n            </div>\n          </ExhibitionClose>\n        </ExhibitionFooter>\n      </ExhibitionContent>\n    </Exhibition>\n  );\n}\n\nexport function ExhibitionStateDemo() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div>\n      <button\n        className=\"btn border-accent border rounded-md p-2\"\n        type=\"button\"\n        onClick={() => setOpen(true)}\n      >\n        状态打开弹窗\n      </button>\n      <Exhibition open={open} onOpenChange={setOpen}>\n        <ExhibitionContent>\n          <ExhibitionHeader>\n            <ExhibitionTitle>组件标题</ExhibitionTitle>\n            <ExhibitionDescription>组件描述</ExhibitionDescription>\n          </ExhibitionHeader>\n          <ExhibitionBody>\n            <p>\n              This component is built using shadcn/ui&apos;s dialog and drawer\n              component, which is built on top of Vaul.\n            </p>\n          </ExhibitionBody>\n          <ExhibitionFooter>\n            <ExhibitionClose asChild className=\"\">\n              <button type=\"button\" className=\"btn btn-outline\">\n                取消\n              </button>\n            </ExhibitionClose>\n          </ExhibitionFooter>\n        </ExhibitionContent>\n      </Exhibition>\n    </div>\n  );\n}"
        },
        {
            "id": "button",
            "title": "Extension Button",
            "description": "按钮组件，基于shadcn/ui的Button组件封装",
            "category": "UI",
            "tags": ["typescript"],
            "previewType": "extension",
            "usageCode": "<Button>按钮</Button>",
            "sourceCode": "import { Button } from \"@components/ui/button\";\n\n<Button>按钮</Button>"
        }
    ]
}