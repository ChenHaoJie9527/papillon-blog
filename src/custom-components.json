{
    "components": [
        {
            "id": "dialog-modal",
            "title": "Exhibition 对话框",
            "description": "对话框组件，在PC端与Mobile端都支持，基于shadcn/ui的Dialog和Drawer组件封装",
            "category": "UI",
            "tags": [
                "hooks"
            ],
            "previewType": "exhibition",
            "usageCode": "<Exhibition>\n  <ExhibitionTrigger asChild>\n    <button className=\"btn\">打开弹窗</button>\n  </ExhibitionTrigger>\n  <ExhibitionContent>\n    <ExhibitionHeader>\n      <ExhibitionTitle>标题</ExhibitionTitle>\n      <ExhibitionDescription>描述</ExhibitionDescription>\n    </ExhibitionHeader>\n    <ExhibitionBody>内容</ExhibitionBody>\n    <ExhibitionFooter>\n      <ExhibitionClose asChild>\n        <button className=\"btn\">关闭</button>\n      </ExhibitionClose>\n    </ExhibitionFooter>\n  </ExhibitionContent>\n</Exhibition>",
            "sourceCode": "\"use client\";\n\nimport { useMemo, createContext, useContext, useState, Fragment } from \"react\";\nimport { cn } from \"@components/lib/utils\";\nimport { useMediaQuery } from \"@hooks/useMediaQuery\";\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@components/ui/dialog\";\nimport {\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from \"@components/ui/drawer\";\n\ninterface BaseProps {\n  children: React.ReactNode;\n}\n\ninterface RootExhibitionProps extends BaseProps {\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n}\n\ninterface ExhibitionProps extends BaseProps {\n  className?: React.HTMLAttributes<HTMLDivElement>[\"className\"];\n  asChild?: true;\n}\n\n// 定义 Context 类型\ninterface ExhibitionContextType {\n  isDesktop: boolean;\n  Comp: typeof Dialog | typeof Drawer;\n  Trigger: typeof DialogTrigger | typeof DrawerTrigger;\n  Close: typeof DialogClose | typeof DrawerClose;\n  Content: typeof DialogContent | typeof DrawerContent;\n  Header: typeof DialogHeader | typeof DrawerHeader;\n  Title: typeof DialogTitle | typeof DrawerTitle;\n  Footer: typeof DialogFooter | typeof DrawerFooter;\n  Description: typeof DialogDescription | typeof DrawerDescription;\n  drawerProps: Record<string, any>;\n}\n\n// 创建 Context\nconst ExhibitionContext = createContext<ExhibitionContextType | null>(null);\n\n// 自定义 Hook\nfunction useExhibitionContext() {\n  const context = useContext(ExhibitionContext);\n  if (!context) {\n    throw new Error(\"Exhibition components must be used within Exhibition\");\n  }\n  return context;\n}\n\n// 主组件\nexport function Exhibition({ children, ...props }: RootExhibitionProps) {\n  const isDesktop = useMediaQuery(\"desktop\", {\n    defaultValue: true, // 在SSR时默认为桌面端\n    initializeWithValue: false, // 避免SSR时的水合问题\n  });\n\n  const Comp = isDesktop ? Dialog : Drawer;\n  const Trigger = isDesktop ? DialogTrigger : DrawerTrigger;\n  const Close = isDesktop ? DialogClose : DrawerClose;\n  const Content = isDesktop ? DialogContent : DrawerContent;\n  const Header = isDesktop ? DialogHeader : DrawerHeader;\n  const Title = isDesktop ? DialogTitle : DrawerTitle;\n  const Footer = isDesktop ? DialogFooter : DrawerFooter;\n  const Description = isDesktop ? DialogDescription : DrawerDescription;\n\n  const contextValue = useMemo(\n    () => ({\n      isDesktop,\n      Comp,\n      Trigger,\n      Close,\n      Content,\n      Header,\n      Title,\n      Footer,\n      Description,\n      drawerProps: !isDesktop ? { autoFocus: true } : {},\n    }),\n    [\n      isDesktop,\n      Comp,\n      Trigger,\n      Close,\n      Content,\n      Header,\n      Title,\n      Footer,\n      Description,\n    ],\n  );\n\n  return (\n    <ExhibitionContext value={contextValue}>\n      <Comp {...props} {...contextValue.drawerProps}>\n        {children}\n      </Comp>\n    </ExhibitionContext>\n  );\n}\n\nexport function ExhibitionTrigger({\n  children,\n  className,\n  ...props\n}: ExhibitionProps) {\n  const { Trigger } = useExhibitionContext();\n  return (\n    <Trigger className={cn(className)} {...props}>\n      {children}\n    </Trigger>\n  );\n}\n\nexport function ExhibitionClose({\n  children,\n  className,\n  ...props\n}: ExhibitionProps) {\n  const { Close } = useExhibitionContext();\n  return (\n    <Close className={cn(className)} {...props}>\n      {children}\n    </Close>\n  );\n}\n\nexport function ExhibitionContent({\n  children,\n  className,\n  ...props\n}: ExhibitionProps) {\n  const { Content } = useExhibitionContext();\n  return (\n    <Content className={cn(className)} {...props}>\n      {children}\n    </Content>\n  );\n}\n\nexport function ExhibitionHeader({\n  children,\n  className,\n  ...props\n}: ExhibitionProps) {\n  const { Header } = useExhibitionContext();\n  return (\n    <Header className={cn(className)} {...props}>\n      {children}\n    </Header>\n  );\n}\n\nexport function ExhibitionTitle({\n  children,\n  className,\n  ...props\n}: ExhibitionProps) {\n  const { Title } = useExhibitionContext();\n  return (\n    <Title className={cn(className)} {...props}>\n      {children}\n    </Title>\n  );\n}\n\nexport function ExhibitionDescription({\n  children,\n  className,\n  ...props\n}: ExhibitionProps) {\n  const { Description } = useExhibitionContext();\n  return (\n    <Description className={cn(className)} {...props}>\n      {children}\n    </Description>\n  );\n}\n\nexport function ExhibitionBody({\n  children,\n  className,\n  ...props\n}: ExhibitionProps) {\n  return (\n    <div className={cn(\"px-4 md:px-0\", className)} {...props}>\n      {children}\n    </div>\n  );\n}\n\nexport function ExhibitionFooter({\n  children,\n  className,\n  ...props\n}: ExhibitionProps) {\n  const { Footer } = useExhibitionContext();\n  return (\n    <Footer className={cn(className)} {...props}>\n      {children}\n    </Footer>\n  );\n}\n\nexport function ExhibitionDemo() {\n  return (\n    <Exhibition>\n      <ExhibitionTrigger asChild>\n        <button\n          className=\"btn border-accent border rounded-md p-2\"\n          type=\"button\"\n        >\n          组件打开弹窗\n        </button>\n      </ExhibitionTrigger>\n      <ExhibitionContent>\n        <ExhibitionHeader>\n          <ExhibitionTitle>组件标题</ExhibitionTitle>\n          <ExhibitionDescription>组件描述</ExhibitionDescription>\n        </ExhibitionHeader>\n        <ExhibitionBody>\n          <p>\n            This component is built using shadcn/ui&apos;s dialog and drawer\n            component, which is built on top of Vaul.\n          </p>\n        </ExhibitionBody>\n        <ExhibitionFooter>\n          <ExhibitionClose asChild className=\" justify-around\">\n            <div className=\"flex gap-2 w-full\">\n              <button type=\"button\" className=\"btn btn-outline\">\n                取消\n              </button>\n              <button type=\"button\" className=\"btn btn-outline\">\n                确认\n              </button>\n            </div>\n          </ExhibitionClose>\n        </ExhibitionFooter>\n      </ExhibitionContent>\n    </Exhibition>\n  );\n}\n\nexport function ExhibitionStateDemo() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div>\n      <button\n        className=\"btn border-accent border rounded-md p-2\"\n        type=\"button\"\n        onClick={() => setOpen(true)}\n      >\n        状态打开弹窗\n      </button>\n      <Exhibition open={open} onOpenChange={setOpen}>\n        <ExhibitionContent>\n          <ExhibitionHeader>\n            <ExhibitionTitle>组件标题</ExhibitionTitle>\n            <ExhibitionDescription>组件描述</ExhibitionDescription>\n          </ExhibitionHeader>\n          <ExhibitionBody>\n            <p>\n              This component is built using shadcn/ui&apos;s dialog and drawer\n              component, which is built on top of Vaul.\n            </p>\n          </ExhibitionBody>\n          <ExhibitionFooter>\n            <ExhibitionClose asChild className=\"\">\n              <button type=\"button\" className=\"btn btn-outline\">\n                取消\n              </button>\n            </ExhibitionClose>\n          </ExhibitionFooter>\n        </ExhibitionContent>\n      </Exhibition>\n    </div>\n  );\n}"
        },
        {
            "id": "button",
            "title": "Extension Button",
            "description": "增强版按钮组件，基于shadcn/ui的Button组件封装，支持图标、加载状态、特效动画等功能",
            "category": "UI",
            "tags": ["button"],
            "previewType": "extension",
            "usageCode": "// 基础用法\n<Button>按钮</Button>\n\n// 带图标\n<Button icon={ArrowRight} iconPlacement=\"right\">\n  带图标按钮\n</Button>\n\n// 加载状态\n<Button loading loadingIconPlacement=\"left\">\n  加载中\n</Button>\n\n// 不同变体\n<Button variant=\"destructive\">危险按钮</Button>\n<Button variant=\"outline\">轮廓按钮</Button>\n<Button variant=\"ghost\">幽灵按钮</Button>\n\n// 特效动画\n<Button effect=\"shineHover\">闪烁效果</Button>\n<Button effect=\"gooeyRight\">粘性效果</Button>\n<Button effect=\"gradientSlideShow\">渐变按钮</Button>",
            "sourceCode": "\"use client\";\n\nimport * as React from \"react\";\nimport { Slot, Slottable } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@components/lib/utils\";\nimport { LoaderCircle } from \"lucide-react\";\n\n// Spinner 组件\nconst spinnerVariants = cva(\"animate-spin text-current\", {\n  variants: {\n    size: {\n      sm: \"size-4\",\n      md: \"size-6\",\n      lg: \"size-8\",\n    },\n  },\n  defaultVariants: {\n    size: \"sm\",\n  },\n});\n\nexport type SpinnerProps = React.ComponentProps<\"span\"> &\n  VariantProps<typeof spinnerVariants> & {\n    loading?: boolean;\n    asChild?: boolean;\n  };\n\nfunction Spinner({\n  className,\n  loading = true,\n  size,\n  asChild = false,\n  ...props\n}: SpinnerProps) {\n  const Comp = asChild ? Slot : \"span\";\n\n  if (!loading) {\n    return null;\n  }\n\n  return (\n    <Comp {...props} className={cn(spinnerVariants({ size }), className)}>\n      <LoaderCircle className=\"w-full h-full\" />\n    </Comp>\n  );\n}\n\n// Button 组件\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 box-border\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground hover:bg-primary/90 border border-accent rounded-md\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4\",\n      },\n      effect: {\n        expandIcon: \"group gap-0 relative\",\n        ringHover:\n          \"transition-all duration-300 hover:ring-2 hover:ring-primary/90 hover:ring-offset-2\",\n        shine:\n          \"relative overflow-hidden before:absolute before:inset-0 before:rounded-[inherit] before:bg-[linear-gradient(45deg,transparent_40%,rgba(255,255,255,0.3)_50%,transparent_60%)] before:bg-[length:250%_250%] before:bg-no-repeat before:bg-[position:200%_0] before:[animation:shine_3s_ease-out_infinite]\",\n        shineHover:\n          \"relative overflow-hidden before:absolute before:inset-0 before:rounded-[inherit] before:bg-[linear-gradient(45deg,transparent_40%,rgba(255,255,255,0.3)_50%,transparent_60%)] before:bg-[length:250%_250%] before:bg-no-repeat before:bg-[position:200%_0] before:transition-[background-position] before:duration-[1200ms] hover:before:bg-[position:-200%_0]\",\n        gooeyRight:\n          \"relative z-0 overflow-hidden transition-all duration-500 before:absolute before:inset-0 before:z-[-1] before:translate-x-[150%] before:translate-y-[150%] before:scale-[2.5] before:rounded-[100%] before:bg-white/10 before:transition-transform before:duration-1000 hover:before:translate-x-[0%] hover:before:translate-y-[0%]\",\n        gooeyLeft:\n          \"relative z-0 overflow-hidden transition-all duration-500 after:absolute after:inset-0 after:z-[-1] after:translate-x-[-150%] after:translate-y-[150%] after:scale-[2.5] after:rounded-[100%] after:bg-white/10 after:transition-transform after:duration-1000  hover:after:translate-x-[0%] hover:after:translate-y-[0%]\",\n        underline:\n          \"relative !no-underline after:absolute after:left-0 after:right-0 after:content-[''] after:bg-accent after:bottom-1 after:h-[1px] after:origin-bottom-left after:scale-x-100 hover:after:origin-bottom-right hover:after:scale-x-0 after:transition-transform after:ease-in-out after:duration-300\",\n        hoverUnderline:\n          \"relative !no-underline after:absolute after:left-0 after:right-0 after:content-[''] after:bg-accent after:bottom-1 after:h-[1px] after:origin-bottom-right after:scale-x-0 hover:after:origin-bottom-left hover:after:scale-x-100 after:transition-transform after:ease-in-out after:duration-300\",\n        gradientSlideShow:\n          \"bg-[size:400%] bg-[linear-gradient(-45deg,var(--gradient-lime),var(--gradient-ocean),var(--gradient-wine),var(--gradient-rust))] animate-gradient-flow\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      size: \"default\",\n      variant: \"default\",\n    },\n  },\n);\n\ntype IconProps = {\n  icon?: React.ElementType;\n  iconPlacement: \"left\" | \"right\";\n};\n\ntype IconRefProps = {\n  icon?: never;\n  iconPlacement?: undefined;\n};\n\ntype LoadingProps = {\n  loading?: boolean;\n  loadingText?: string;\n  hideIconOnLoading?: boolean;\n  loadingIconPlacement?: \"left\" | \"right\";\n};\n\nexport type ButtonIconProps = IconProps | IconRefProps;\n\nexport type ButtonProps = React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> &\n  ButtonIconProps &\n  LoadingProps & {\n    asChild?: boolean;\n  };\n\nfunction Button({\n  className,\n  variant,\n  effect,\n  size,\n  icon: Icon,\n  iconPlacement,\n  loading,\n  loadingText = \"Loading\",\n  children,\n  hideIconOnLoading = false,\n  loadingIconPlacement = \"right\",\n  asChild = false,\n  ...props\n}: ButtonProps) {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className, effect }))}\n      disabled={loading}\n      {...props}\n    >\n      {/* loading 左侧图标 */}\n      {loading && loadingIconPlacement === \"left\" && <Spinner size=\"sm\" />}\n\n      {/* icon */}\n      {Icon &&\n        iconPlacement === \"left\" &&\n        !(hideIconOnLoading && loading) &&\n        (effect === \"expandIcon\" ? (\n          <div className=\"w-0 translate-x-[-100%] pr-0 opacity-0 transition-all duration-200 group-hover:w-5 group-hover:translate-x-0 group-hover:pr-2 group-hover:opacity-100 overflow-hidden\">\n            <Icon />\n          </div>\n        ) : (\n          <Icon />\n        ))}\n\n      <Slottable>{loading ? loadingText : children}</Slottable>\n\n      {/* loading 右侧图标 */}\n      {loading && loadingIconPlacement === \"right\" && <Spinner size=\"sm\" />}\n\n      {Icon &&\n        iconPlacement === \"right\" &&\n        !(hideIconOnLoading && loading) &&\n        (effect === \"expandIcon\" ? (\n          <div className=\"w-0 translate-x-[100%] pl-0 opacity-0 transition-all duration-200 group-hover:w-5 group-hover:translate-x-0 group-hover:pl-2 group-hover:opacity-100\">\n            <Icon />\n          </div>\n        ) : (\n          <Icon />\n        ))}\n    </Comp>\n  );\n}\n\nexport { Button, buttonVariants, Spinner };"
        }
    ]
}